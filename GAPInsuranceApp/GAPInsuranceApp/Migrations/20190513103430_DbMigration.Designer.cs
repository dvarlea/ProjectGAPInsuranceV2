// <auto-generated />
using System;
using GAPInsuranceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GAPInsuranceApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190513103430_DbMigration")]
    partial class DbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GAPInsuranceApp.Models.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Begining");

                    b.Property<int>("ClientId");

                    b.Property<double>("CoverageAmt");

                    b.Property<string>("Coverages");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Risk");

                    b.Property<int>("TimePeriod");

                    b.HasKey("Id");

                    b.ToTable("Insurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 642, DateTimeKind.Local).AddTicks(2453),
                            ClientId = 123456789,
                            CoverageAmt = 0.59999999999999998,
                            Coverages = "Accidente, Vandalismo",
                            Description = "Seguro de Auto de GAPClient",
                            Name = "Seguro de Auto",
                            Price = 3000.0,
                            Risk = 3,
                            TimePeriod = 6
                        },
                        new
                        {
                            Id = 2,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 643, DateTimeKind.Local).AddTicks(2499),
                            ClientId = 123456789,
                            CoverageAmt = 0.5,
                            Coverages = "Incendio, Robo",
                            Description = "Seguro de Vivienda de GAPClient",
                            Name = "Seguro de Vivienda",
                            Price = 7000.0,
                            Risk = 1,
                            TimePeriod = 12
                        },
                        new
                        {
                            Id = 3,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 643, DateTimeKind.Local).AddTicks(2518),
                            ClientId = 123456789,
                            CoverageAmt = 0.80000000000000004,
                            Coverages = "Muerte, accidentes",
                            Description = "Seguro de vida de GAPClient",
                            Name = "Seguro de Vida",
                            Price = 2000.0,
                            Risk = 4,
                            TimePeriod = 24
                        },
                        new
                        {
                            Id = 4,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 643, DateTimeKind.Local).AddTicks(2522),
                            ClientId = 123456789,
                            CoverageAmt = 0.40000000000000002,
                            Coverages = "Desempleo",
                            Description = "Seguro de Desempleo de GAPClient",
                            Name = "Seguro de Desempleo",
                            Price = 50.0,
                            Risk = 2,
                            TimePeriod = 3
                        },
                        new
                        {
                            Id = 5,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 643, DateTimeKind.Local).AddTicks(2522),
                            ClientId = 123456787,
                            CoverageAmt = 0.90000000000000002,
                            Coverages = "Incendio, Danos",
                            Description = "Seguro de Vivienda de GAPClient2",
                            Name = "Seguro de Vivienda",
                            Price = 200.0,
                            Risk = 4,
                            TimePeriod = 2
                        },
                        new
                        {
                            Id = 6,
                            Begining = new DateTime(2019, 5, 13, 4, 34, 30, 643, DateTimeKind.Local).AddTicks(2522),
                            ClientId = 123456787,
                            CoverageAmt = 0.69999999999999996,
                            Coverages = "Accidente",
                            Description = "Seguro de Viaje de GAPClient2",
                            Name = "Seguro de Viaje",
                            Price = 40.0,
                            Risk = 3,
                            TimePeriod = 1
                        });
                });

            modelBuilder.Entity("GAPInsuranceApp.Models.User", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 123456789,
                            LastName = "GAP",
                            Name = "GAP",
                            Role = 1,
                            Username = "GAPClient"
                        },
                        new
                        {
                            Id = 123456788,
                            LastName = "GAPAdmin",
                            Name = "GAPAdmin",
                            Role = 0,
                            Username = "GAPAdmin"
                        },
                        new
                        {
                            Id = 123456787,
                            LastName = "GAPClient2",
                            Name = "GAPClient2",
                            Role = 1,
                            Username = "GAPClient2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
